/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * MessageTemplateAPI
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable,
  inject
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  MessageTemplateRequest
} from '../model';



interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
        | HttpParams
        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: {includeHeaders?: string[]} | boolean;
  timeout?: number;
}



@Injectable({ providedIn: 'root' })
export class MessageTemplateAPIService {
  private readonly http = inject(HttpClient);
/**
 * @summary Create Template
 */
 postApi(messageTemplateRequest: MessageTemplateRequest, options?: HttpClientOptions & { observe?: 'body' }): Observable<string>;
 postApi(messageTemplateRequest: MessageTemplateRequest, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<string>>;
 postApi(messageTemplateRequest: MessageTemplateRequest, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<string>>;
  postApi(
    messageTemplateRequest: MessageTemplateRequest, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post(
      `http://localhost:8080/api`,
      messageTemplateRequest,{
        responseType: 'text',
    ...options,}
    );
  }

};

export type PostApiClientResult = NonNullable<string>
